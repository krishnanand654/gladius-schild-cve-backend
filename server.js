const express = require("express");
const axios = require("axios");
const cors = require("cors");

const app = express();
const port = 8000; // Set the desired port number
app.use(cors());

app.use(express.json());

let dotenv = require('dotenv').config()
console.log(dotenv.parsed.API_KEY);

app.get("/api/cve/all/:page", async (req, res) => {
  const { page } = req.params;
  console.log(page)
  const currentDateTime = new Date();
  const endDate =
    currentDateTime.toISOString().slice(0, 10) + "T00:00:00.000-05:00"; // Current date
  console.log(endDate);

  const startDate = new Date(
    currentDateTime.getTime() - 120 * 24 * 60 * 60 * 1000
  );
  const startDateString =
    startDate.toISOString().slice(0, 10) + "T23:59:59.999-05:00"; // 120 days before the current date
  console.log(startDateString);
  const url = `https://services.nvd.nist.gov/rest/json/cves/2.0/?pubStartDate=${startDateString}&pubEndDate=${endDate}&resultsPerPage=5&startIndex=${page}`;

  const apiKey = dotenv.parsed.API_KEY; // Replace 'YOUR_API_KEY' with your actual API key

  try {
    const response = await axios.get(url, {
      headers: {
        "X-API-Key": apiKey,
      },

    }

    );

    const metaData = {
      resultsPerPage: response.data.resultsPerPage,
      startIndex: response.data.startIndex,
      totalResults: response.data.totalResults
    }


    // Make a second API call for each cveId and combine the results
    const mitreDataPromises = response.data.vulnerabilities.map(async (item) => {
      const cveId = item.cve.id;
      const secondApiUrl = `https://cveawg.mitre.org/api/cve/${cveId}`;
      try {
        const secondApiResponse = await axios.get(secondApiUrl, {
          headers: {
            "X-API-Key": apiKey,
          },

        });

        return secondApiResponse.data;
      } catch (error) {
        console.error(`Error while fetching data for ${cveId}: ${error.message}`);
        return null;
      }
    });

    const mitreData = await Promise.all(mitreDataPromises);

    // Combine the results and send to the frontend
    const combinedData = response.data.vulnerabilities.map((item, index) => ({
      metaData: metaData,
      cveData: item,
      mitreData: mitreData[index],
    }));



    res.status(response.status).json(combinedData);
  } catch (error) {
    res
      .status(500)
      .json({ error: `An error occurred while making the request: ${error.message}` });
  }
});



app.get("/api/cve/:id", async (req, res) => {
  const { id } = req.params;
  const currentDateTime = new Date();
  const endDate =
    currentDateTime.toISOString().slice(0, 10) + "T00:00:00.000-05:00"; // Current date
  console.log(endDate);

  const startDate = new Date(
    currentDateTime.getTime() - 120 * 24 * 60 * 60 * 1000
  );
  const startDateString =
    startDate.toISOString().slice(0, 10) + "T23:59:59.999-05:00"; // 120 days before the current date
  console.log(startDateString);
  const url = `https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${id}`;

  console.log(url);
  const apiKey = dotenv.parsed.API_KEY; // Replace 'YOUR_API_KEY' with your actual API key

  try {
    const response = await axios.get(url, {
      headers: {
        "X-API-Key": apiKey,
      },
    }
    );
    // Make a second API call for each cveId and combine the results
    const mitreDataPromises = response.data.vulnerabilities.map(async (item) => {
      const cveId = item.cve.id;
      const secondApiUrl = `https://cveawg.mitre.org/api/cve/${id}`;
      try {
        const secondApiResponse = await axios.get(secondApiUrl, {
          headers: {
            "X-API-Key": apiKey,
          },

        });

        return secondApiResponse.data;
      } catch (error) {
        console.error(`Error while fetching data for ${cveId}: ${error.message}`);
        return null;
      }
    });

    const mitreData = await Promise.all(mitreDataPromises);

    // Combine the results and send to the frontend
    const combinedData = response.data.vulnerabilities.map((item, index) => ({
      cveData: item,
      mitreData: mitreData[index],
    }));

    res.status(response.status).json(combinedData);
  } catch (error) {
    res
      .status(500)
      .json({ error: `An error occurred while making the request: ${error.message}` });
  }
});

app.get("/hello", async (req, res) => {
  res.json({ status: "the server is up and running", })
});


app.listen(port, () => {
  console.log(`Proxy server is running on port ${port}`);
});












// app.get("/api/cve", async (req, res) => {
//   const { cveId } = req.query;
//   const url = `https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${cveId}`;
//   const apiKey = "584b23ce-a77d-4ca8-849e-5ee93e574e78"; // Replace 'YOUR_API_KEY' with your actual API key

//   try {
//     const response = await axios.get(url, {
//       headers: {
//         "X-API-Key": apiKey,
//       },
//     });
//     res.status(response.status).json(response.data);
//   } catch (error) {
//     res
//       .status(500)
//       .json({ error: "An error occurred while making the request" });
//   }
// });

// app.get("/api/cve/all", async (req, res) => {
//   const currentDateTime = new Date();
//   const endDate =
//     currentDateTime.toISOString().slice(0, 10) + "T00:00:00.000-05:00"; // Current date
//   console.log(endDate);

//   const startDate = new Date(
//     currentDateTime.getTime() - 120 * 24 * 60 * 60 * 1000
//   );
//   const startDateString =
//     startDate.toISOString().slice(0, 10) + "T23:59:59.999-05:00"; // 120 days before the current date
//   console.log(startDateString);
//   const url = `https://services.nvd.nist.gov/rest/json/cves/2.0/?pubStartDate=${startDateString}&pubEndDate=${endDate}&resultsPerPage=10`;

//   console.log(url);
//   const apiKey = "584b23ce-a77d-4ca8-849e-5ee93e574e78"; // Replace 'YOUR_API_KEY' with your actual API key

//   try {
//     const response = await axios.get(url, {
//       headers: {
//         "X-API-Key": apiKey,
//       },
//     });
//     res.status(response.status).json(response.data);
//   } catch (error) {
//     res
//       .status(500)
//       .json({ error: "An error occurred while making the request" });
//   }
// });
